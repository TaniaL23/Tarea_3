@model Tarea_3.Models.ProductoModel

@{
    ViewData["Title"] = "Registrar Nuevo Producto";
}

<h2 class="mb-4">Registrar Nuevo Producto para Mascotas</h2>

@if (ViewBag.Mensaje != null)
{
    <div class="alert alert-success" role="alert">
        @ViewBag.Mensaje
    </div>
}

<form asp-action="Registrar" method="post" class="needs-validation" novalidate>
    <div class="mb-3">
        <label for="Nombre" class="form-label">Nombre del producto</label>
        <input type="text" class="form-control @(ViewData.ModelState["Nombre"]?.Errors.Count > 0 ? "is-invalid" : "")" 
               id="Nombre" name="Nombre" value="@Model?.Nombre" required />
        <div class="invalid-feedback">
            @Html.ValidationMessageFor(m => m.Nombre)
        </div>
    </div>

    <div class="mb-3">
        <label for="TipoMascota" class="form-label">Tipo de mascota</label>
        <input type="text" class="form-control @(ViewData.ModelState["TipoMascota"]?.Errors.Count > 0 ? "is-invalid" : "")" 
               id="TipoMascota" name="TipoMascota" value="@Model?.TipoMascota" required />
        <div class="invalid-feedback">
            @Html.ValidationMessageFor(m => m.TipoMascota)
        </div>
    </div>

    <div class="mb-3">
        <label for="Precio" class="form-label">Precio (S/)</label>
        <input type="number" step="0.01" min="0.01" class="form-control @(ViewData.ModelState["Precio"]?.Errors.Count > 0 ? "is-invalid" : "")" 
               id="Precio" name="Precio" value="@Model?.Precio" required />
        <div class="invalid-feedback">
            @Html.ValidationMessageFor(m => m.Precio)
        </div>
    </div>

    <div class="mb-3">
        <label for="Descripcion" class="form-label">Descripci√≥n</label>
        <textarea class="form-control" id="Descripcion" name="Descripcion" rows="3">@Model?.Descripcion</textarea>
    </div>

    <button type="submit" class="btn btn-primary">Registrar Producto</button>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        (() => {
            'use strict'
            const forms = document.querySelectorAll('.needs-validation')
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }
                    form.classList.add('was-validated')
                }, false)
            })
        })()
    </script>
}